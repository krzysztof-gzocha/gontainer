{{- $ContainerPathAlias := importAlias "github.com/gomponents/gontainer-helpers/container" -}}
{{- $ContainerType := .Input.Meta.ContainerType -}}

{{- range $name, $param := .Input.Params -}}
// {{$name}}
// Raw: {{ export $param.Raw }}
// GO:  {{$param.Code}}
// -----------------------------------------------------------------------------
{{end}}
type {{$ContainerType}} struct {
	*{{$ContainerPathAlias}}.BaseContainer
	*{{$ContainerPathAlias}}.BaseParamContainer
}

func (c *{{$ContainerType}}) ValidateAllServices() (errors map[string]error) {
	errors = make(map[string]error)
	for _, id := range []string{
{{range $service := .Input.Services -}} {{ "		" }} {{- export $service.Name }},{{ "\n" }}{{ end -}}
{{- "	" -}} } {
		if _, err := c.Get(id); err != nil {
			errors[id] = err
		}
	}
	if len(errors) == 0 {
		errors = nil
	}
	return
}

func NewParamContainer() *{{$ContainerPathAlias}}.BaseParamContainer {
	result := {{$ContainerPathAlias}}.NewBaseParamContainer(nil)
{{- range $name, $param := .Input.Params}}
    result.OverrideParam({{ export $name }}, func() interface{} {
        return {{$param.Code}}
    })
{{- end}}
	return result
}

func CreateContainer() *{{$ContainerType}} {
	result := &{{$ContainerType}}{}

	getters := make(map[string]{{$ContainerPathAlias}}.ServiceDefinition)
	getters["serviceContainer"] = {{$ContainerPathAlias}}.ServiceDefinition{
		Getter: func() (interface{}, error) {
			return result, nil
		},
		Disposable: false,
	}
{{range $service := .Input.Services}}	getters[{{ export $service.Name }}] = {{$ContainerPathAlias}}.ServiceDefinition{
		Getter: func() (service interface{}, err error) {
			defer func() {
				if r := recover(); r != nil {
					err = {{ importAlias "fmt" }}.Errorf("%s", r)
				}
			}()
			{{ if ne $service.Constructor "" }}return {{ importAlias "github.com/gomponents/gontainer-helpers/caller" }}.CallProvider(
			    {{$service.Constructor}},
				{{- range $argIndex, $arg := $service.Args }}
				// {{ export $arg.Raw }}
					{{- if $arg.IsService }}
				result.MustGet({{export $arg.ServiceLink.Name}}),
					{{- else }}
				{{ $arg.Code }},
					{{- end -}}
				{{- end }}
			){{ else }}
			var result {{$service.Type}}
            service = result
            return
			{{ end }}
		},
		Disposable: {{$service.Disposable}},
	}
{{end}}
	result = &{{$ContainerType}}{
	    BaseContainer:      {{$ContainerPathAlias}}.NewBaseContainer(getters),
	    BaseParamContainer: NewParamContainer(),
	}
	return result
}

{{- range $service := .Input.Services -}}
{{- if ne $service.Getter "" }}

func (c *{{$ContainerType}}) {{ $service.Getter }}() (result {{ $service.Type }}, err error) {
	var object interface{}
	var ok bool

	object, err = c.Get({{ export $service.Name }})

	if err != nil {
		return
	}

	if result, ok = object.({{ $service.Type }}); !ok {
		err = {{ importAlias "fmt" }}.Errorf("cannot create %s, because cannot cast %T to %T", {{ export $service.Name }}, object, result)
	}

	return
}
{{- end -}}
{{- end }}
