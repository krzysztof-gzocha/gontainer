{{- $containerType := .Input.Meta.ContainerType -}}

{{- range $name, $param := .Input.Params -}}
// {{$name}}
// Raw: {{ export $param.Raw }}
// GO:  {{$param.Code}}
// -----------------------------------------------------------------------------
{{end}}
type {{$containerType}} struct {
	*{{containerAlias}}.BaseContainer
	*{{containerAlias}}.BaseParamContainer
	*{{containerAlias}}.BaseTaggedContainer
}

func (c *{{$containerType}}) ValidateAllServices() (errors map[string]error) {
	errors = make(map[string]error)
	for _, id := range c.GetAllServiceIDs() {
		if _, err := c.Get(id); err != nil {
			errors[id] = err
		}
	}
	if len(errors) == 0 {
		errors = nil
	}
	return
}

func NewParamContainer() *{{containerAlias}}.BaseParamContainer {
	result := {{containerAlias}}.NewBaseParamContainer(nil)
{{- range $param := .Input.Params}}
    result.OverrideParam({{ export $param.Name }}, func() interface{} {
        // {{ export $param.Raw }}
        return {{$param.Code}}
    })
{{- end}}
	return result
}

func NewContainer() *{{$containerType}} {
	result := &{{$containerType}}{}

	getters := make(map[string]{{containerAlias}}.ServiceDefinition)
	getters["serviceContainer"] = {{containerAlias}}.ServiceDefinition{
		Provider: func() (interface{}, error) {
			return result, nil
		},
		Disposable: false,
	}
{{range $service := .Input.Services}}	getters[{{ export $service.Name }}] = {{containerAlias}}.ServiceDefinition{
		Provider: func() (service interface{}, err error) {
			defer func() {
				if r := recover(); r != nil {
					err = {{ importAlias "fmt" }}.Errorf("%s", r)
				}
			}()

			{{- if eq $service.Todo true }}
			err = {{ importAlias "fmt" }}.Errorf("todo")
			{{ end }}

			{{- if ne $service.Constructor "" }}
			service, err = {{ callerAlias }}.CallProvider(
			    {{$service.Constructor}},
				{{- range $arg := $service.Args }}
				// {{ export $arg.Raw }}
				{{ $arg.Code }},
				{{- end }}
			)
			if err != nil {
			    return
			}
			{{- else if ne $service.Type "" }}
			var typeService {{$service.Type}}
            service = typeService
            {{- else if ne $service.Value "" }}
            service = {{ $service.Value }}
			{{- end -}}

			{{- range $call := $service.Calls }}
            {{ if eq $call.Immutable true }}service = {{ end }}{{ callerAlias }}.{{ if eq $call.Immutable true }}MustCallWitherByName{{ else }}MustCallByName{{ end }}(
                &service,
                {{ export $call.Method }},
				{{- range $arg := $call.Args }}
				// {{ export $arg.Raw }}
				{{ $arg.Code }},
				{{- end }}
            )
			{{- end -}}

			{{- range $field := $service.Fields }}
			// {{ export $field.Value.Raw }}
            {{ setterAlias }}.MustSet(&service, {{ export $field.Name }}, {{ $field.Value.Code }})
			{{- end }}

            return
		},
		Disposable: {{$service.Disposable}},
	}
{{end}}
    baseContainer := {{containerAlias}}.NewBaseContainer(getters)
    baseTaggedContainer := {{containerAlias}}.NewBaseTaggedContainer(baseContainer)
    {{- range $service := .Input.Services }}{{ range $tag := $service.Tags }}
    baseTaggedContainer.OverrideTagService({{ export $tag.Name }}, {{ export $service.Name }}, {{ export $tag.Priority }})
    {{- end }}{{ end }}
	result = &{{$containerType}}{
	    BaseContainer:       baseContainer,
	    BaseParamContainer:  NewParamContainer(),
	    BaseTaggedContainer: baseTaggedContainer,
	}
	return result
}

{{- range $service := .Input.Services -}}
{{- if ne $service.Getter "" }}

func (c *{{$containerType}}) {{ $service.Getter }}() (result {{ $service.Type }}, err error) {
	var object interface{}
	var ok bool

	object, err = c.Get({{ export $service.Name }})

	if err != nil {
		return
	}

	if result, ok = object.({{ $service.Type }}); !ok {
		err = {{ importAlias "fmt" }}.Errorf("cannot create %s, because cannot cast %T to %T", {{ export $service.Name }}, object, result)
	}

	return
}
{{- end -}}
{{- end }}
