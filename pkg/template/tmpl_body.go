package template

const TemplateBody = "{{- $containerPathAlias := importAlias \"github.com/gomponents/gontainer-helpers/container\" -}}\n{{- $containerType := .Input.Meta.ContainerType -}}\n{{- $callerPathAlias := importAlias \"github.com/gomponents/gontainer-helpers/caller\" -}}\n{{- $setterPathAlias := importAlias \"github.com/gomponents/gontainer-helpers/setter\" -}}\n\n{{- range $name, $param := .Input.Params -}}\n// {{$name}}\n// Raw: {{ export $param.Raw }}\n// GO:  {{$param.Code}}\n// -----------------------------------------------------------------------------\n{{end}}\ntype {{$containerType}} struct {\n\t*{{$containerPathAlias}}.BaseContainer\n\t*{{$containerPathAlias}}.BaseParamContainer\n\t*{{$containerPathAlias}}.BaseTaggedContainer\n}\n\nfunc (c *{{$containerType}}) ValidateAllServices() (errors map[string]error) {\n\terrors = make(map[string]error)\n\tfor _, id := range []string{\n{{range $service := .Input.Services -}} {{ \"\t\t\" }} {{- export $service.Name }},{{ \"\\n\" }}{{ end -}}\n{{- \"\t\" -}} } {\n\t\tif _, err := c.Get(id); err != nil {\n\t\t\terrors[id] = err\n\t\t}\n\t}\n\tif len(errors) == 0 {\n\t\terrors = nil\n\t}\n\treturn\n}\n\nfunc NewParamContainer() *{{$containerPathAlias}}.BaseParamContainer {\n\tresult := {{$containerPathAlias}}.NewBaseParamContainer(nil)\n{{- range $param := .Input.Params}}\n    result.OverrideParam({{ export $param.Name }}, func() interface{} {\n        // {{ export $param.Raw }}\n        return {{$param.Code}}\n    })\n{{- end}}\n\treturn result\n}\n\nfunc CreateContainer() *{{$containerType}} {\n\tresult := &{{$containerType}}{}\n\n\tgetters := make(map[string]{{$containerPathAlias}}.ServiceDefinition)\n\tgetters[\"serviceContainer\"] = {{$containerPathAlias}}.ServiceDefinition{\n\t\tProvider: func() (interface{}, error) {\n\t\t\treturn result, nil\n\t\t},\n\t\tDisposable: false,\n\t}\n{{range $service := .Input.Services}}\tgetters[{{ export $service.Name }}] = {{$containerPathAlias}}.ServiceDefinition{\n\t\tProvider: func() (service interface{}, err error) {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\terr = {{ importAlias \"fmt\" }}.Errorf(\"%s\", r)\n\t\t\t\t}\n\t\t\t}()\n\n\t\t\t{{- if eq $service.Todo true }}\n\t\t\terr = {{ importAlias \"fmt\" }}.Errorf(\"todo\")\n\t\t\t{{ end }}\n\n\t\t\t{{- if ne $service.Constructor \"\" }}\n\t\t\tservice, err = {{ $callerPathAlias }}.CallProvider(\n\t\t\t    {{$service.Constructor}},\n\t\t\t\t{{- range $arg := $service.Args }}\n\t\t\t\t// {{ export $arg.Raw }}\n\t\t\t\t{{ $arg.Code }},\n\t\t\t\t{{- end }}\n\t\t\t)\n\t\t\tif err != nil {\n\t\t\t    return\n\t\t\t}\n\t\t\t{{- else if ne $service.Type \"\" }}\n\t\t\tvar typeService {{$service.Type}}\n            service = typeService\n            {{- else if ne $service.Value \"\" }}\n            service = {{ $service.Value }}\n\t\t\t{{- end -}}\n\n\t\t\t{{- range $call := $service.Calls }}\n            {{ if eq $call.Immutable true }}service = {{ end }}{{ $callerPathAlias }}.{{ if eq $call.Immutable true }}MustCallWitherByName{{ else }}MustCallByName{{ end }}(\n                &service,\n                {{ export $call.Method }},\n\t\t\t\t{{- range $arg := $call.Args }}\n\t\t\t\t// {{ export $arg.Raw }}\n\t\t\t\t{{ $arg.Code }},\n\t\t\t\t{{- end }}\n            )\n\t\t\t{{- end -}}\n\n\t\t\t{{- range $field := $service.Fields }}\n\t\t\t// {{ export $field.Value.Raw }}\n            {{ $setterPathAlias }}.MustSet(&service, {{ export $field.Name }}, {{ $field.Value.Code }})\n\t\t\t{{- end }}\n\n            return\n\t\t},\n\t\tDisposable: {{$service.Disposable}},\n\t}\n{{end}}\n    baseContainer := {{$containerPathAlias}}.NewBaseContainer(getters)\n    baseTaggedContainer := {{$containerPathAlias}}.NewBaseTaggedContainer(baseContainer)\n    {{- range $service := .Input.Services }}{{ range $tag := $service.Tags }}\n    baseTaggedContainer.OverrideTagService({{ export $tag.Name }}, {{ export $service.Name }}, {{ export $tag.Priority }})\n    {{- end }}{{ end }}\n\tresult = &{{$containerType}}{\n\t    BaseContainer:       baseContainer,\n\t    BaseParamContainer:  NewParamContainer(),\n\t    BaseTaggedContainer: baseTaggedContainer,\n\t}\n\treturn result\n}\n\n{{- range $service := .Input.Services -}}\n{{- if ne $service.Getter \"\" }}\n\nfunc (c *{{$containerType}}) {{ $service.Getter }}() (result {{ $service.Type }}, err error) {\n\tvar object interface{}\n\tvar ok bool\n\n\tobject, err = c.Get({{ export $service.Name }})\n\n\tif err != nil {\n\t\treturn\n\t}\n\n\tif result, ok = object.({{ $service.Type }}); !ok {\n\t\terr = {{ importAlias \"fmt\" }}.Errorf(\"cannot create %s, because cannot cast %T to %T\", {{ export $service.Name }}, object, result)\n\t}\n\n\treturn\n}\n{{- end -}}\n{{- end }}\n"
